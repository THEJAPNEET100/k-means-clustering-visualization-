import numpy as np
import matplotlib.pyplot as plt


# method for calculating distance between two vectors
def dist(a, b):
    num_features = len(a)
    # num_features stores no. of features
    squared_difference = 0
    for i in range(0, num_features):
        squared_difference = squared_difference + np.power((a[i] - b[i]), 2)
    return np.power(squared_difference, .5)


# method for reading data from a file
def read_data(name):
    return np.loadtxt(name)
    # read data from file


# method for initializing k centroids randomly (centroids might be at the same location)
def initialize_centroids(k, dataset):
    centroids = []
    num_instances, num_features = dataset.shape
    for i in range(0, k):
        # centroids are stored in a array
        centroids.append(dataset[np.random.randint(0, num_instances - 1)])
    return centroids


# method for animating points and their centroids
def animate(dataset, centroids, labeled_dataset):
    for i, obj in enumerate(dataset):
        if(labeled_dataset[i]) == 0:
            plt.scatter(obj[0], obj[1], s=30, marker='o', color='blue')
        else:
            plt.scatter(obj[0], obj[1], s=30, marker='o', color='red')
    for i, obj in enumerate(centroids):
        if i == 0:
            plt.scatter(obj[0], obj[1], s=70, marker='*', color='brown')
        else:
            plt.scatter(obj[0], obj[1], s=30, marker='+', color='pink')
    plt.pause(.1)


# method for assigning labels to the data points ( use it recursively )
def k_means(dataset, centroids, labeled_dataset):
    num_instances, num_features = dataset.shape
    # change = 0 means there is no change is assignment of data points, process could be stopped at this point
    change = 1
    least_dist = 200
    print(centroids[labeled_dataset[1]])
    while change == 1:
        change = 0
        # for each point in the dataset distances are compared
        for i in range(len(dataset)):
            change = 0
            # least distance is assumed from its current centroid
            least_dist = dist(dataset[i], centroids[labeled_dataset[i]])
            label = labeled_dataset[i]
            for j in range (len(centroids)):
                # checking whether its distance from jth centroid is lesser
                temp_dist = dist(dataset[i], centroids[j])
                if temp_dist < least_dist:
                    least_dist = temp_dist
                    # least distance is found at the end of this loop with centroid j nearest to it
                    label = j
                    # one more iteration needed at least
                    change = 1
            labeled_dataset[i] = label
            # if a point is assigned a new centroid then centroid is shifted
            if change == 1:
                # choosing a centroid
                for k in range(len(centroids)):
                    # n is length of dataset points
                    n = len(dataset)
                    # count tells no. of points assigned to this centroid
                    count = 0
                    for j in range(0, n):
                        if labeled_dataset[j] == k:
                            count = count+1
                            # centroid will be shifted towards jth data point
                            centroids[k] = centroids[k] + dataset[j]
                    if count == 0:
                        count = 1
                    centroids[k] = np.divide(centroids[k], count)
                    animate(dataset,centroids,labeled_dataset)


def execute():
    t = read_data('durudataset.txt')
    centroids_new = initialize_centroids(2, t)
    print(centroids_new)
    a1, b1 = t.shape
    labeled_dataset = []
    # initialize dataset points to labelled as '0'
    for i in range(0, a1):
        labeled_dataset.append(0)
    k_means(t, centroids_new, labeled_dataset)
    print(centroids_new)


execute()
